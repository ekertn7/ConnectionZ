"""Tests DirectedGraph and UndirectedGraph method `add_node`

if (wrong type of node identifier):
    - raise WrongTypeOfNodeIdentifierException

if (node exists) and (replace is False):
    - raise NodeAlreadyExistsException

if (node exists) and (replace is True):
    - replace existing node
    - copying calculated attributes

if (node not exists):
    - create new node with specified identifier

- generate identifier automatically (if node identifier not specified)
- return node identifier
"""

import pytest
from connectionz import (
    DirectedGraph, UndirectedGraph,
    Identifier, generate_identifier,
    WrongTypeOfNodeIdentifierException,
    NodeAlreadyExistsException)


class TestsDirectedGraphMethodAddNode:
    """Tests of DirectedGraph method `add_node`"""

    def test_add_node_with_autogenerated_identifier(self):
        """Adding node without identifier
            - identifier should be generated automatically
            - non-existent node should be added
            - node identifier should be returned
        """
        graph = DirectedGraph()
        identifier = graph.add_node()
        assert (isinstance(identifier, Identifier)
            and len(identifier) == len(generate_identifier())
            and len(graph.nodes) == 1
            and identifier in graph.nodes
            and len(graph.nodes[identifier]) == 0)

    def test_exception_wrong_type_of_node_identifier(self):
        """Adding node with wrong identifier type
            - node with wrong identifier should not be added
            - expected raise WrongTypeOfNodeIdentifierException
        """
        graph = DirectedGraph()
        with pytest.raises(WrongTypeOfNodeIdentifierException):
            graph.add_node(4217_092672)  # wrong type of node identifier
        assert len(graph.nodes) == 0 and 4217_092672 not in graph.nodes

    def test_add_node_with_specified_identifier(self):
        """Adding node with specified identifier
            - non-existent node should be added
            - node identifier should be returned
        """
        graph = DirectedGraph()
        identifier = graph.add_node('Luca')
        assert (isinstance(identifier, Identifier)
            and identifier == 'Luca'
            and len(graph.nodes) == 1
            and identifier in graph.nodes
            and len(graph.nodes[identifier]) == 0)

    def test_filled_attributes(self):
        """Adding node with attributes
            - non-existent node should be added
            - filled attributes should be added to node
            - node identifier should be returned
        """
        graph = DirectedGraph()
        identifier = graph.add_node(age=21, sex=True)
        assert (len(graph.nodes) == 1
            and identifier in graph.nodes
            and len(graph.nodes[identifier]) == 2
            and graph.nodes[identifier].get('age') == 21
            and graph.nodes[identifier].get('sex') is True)

    def test_exception_node_already_exists(self):
        """Adding already existing node
            - existent node should not be replaced by new
            - expected raise NodeAlreadyExistsException
        """
        graph = DirectedGraph()
        graph.add_node('Theodore')
        with pytest.raises(NodeAlreadyExistsException):
            graph.add_node('Theodore', age=23, sex=True)  # node already exists
        assert (len(graph.nodes) == 1
            and 'Theodore' in graph.nodes
            and graph.nodes['Theodore'].get('age') is None
            and graph.nodes['Theodore'].get('sex') is None)

    def test_replace_existing_node_and_copying_calculated_attributes(self):
        """Replacing already existing node
            - existent node should be replaced by new (if replace=True)
            - calculated attributes should be copied
        """
        graph = DirectedGraph()
        graph.add_node('Naomi', age=18)
        graph.calc_degree()
        graph.find_neighbors()
        identifier = graph.add_node('Naomi', age=27, replace=True)  # replace existing node
        assert (len(graph.nodes) == 1
            and identifier in graph.nodes
            and len(graph.nodes[identifier]) == 3
            and graph.nodes[identifier].get('age') == 27
            and graph.nodes[identifier].get('degree') == 0
            and graph.nodes[identifier].get('neighbors') == set())


class TestsUndirectedGraphMethodAddNode:
    """Tests of UndirectedGraph method `add_node`"""

    def test_add_node_with_autogenerated_identifier(self):
        """Adding node without identifier
            - identifier should be generated automatically
            - non-existent node should be added
            - node identifier should be returned
        """
        graph = UndirectedGraph()
        identifier = graph.add_node()
        assert (isinstance(identifier, Identifier)
            and len(identifier) == len(generate_identifier())
            and len(graph.nodes) == 1
            and identifier in graph.nodes
            and len(graph.nodes[identifier]) == 0)

    def test_exception_wrong_type_of_node_identifier(self):
        """Adding node with wrong identifier type
            - node with wrong identifier should not be added
            - expected raise WrongTypeOfNodeIdentifierException
        """
        graph = UndirectedGraph()
        with pytest.raises(WrongTypeOfNodeIdentifierException):
            graph.add_node(4217_092672)  # wrong type of node identifier
        assert len(graph.nodes) == 0 and 4217_092672 not in graph.nodes

    def test_add_node_with_specified_identifier(self):
        """Adding node with specified identifier
            - non-existent node should be added
            - node identifier should be returned
        """
        graph = UndirectedGraph()
        identifier = graph.add_node('Luca')
        assert (isinstance(identifier, Identifier)
            and identifier == 'Luca'
            and len(graph.nodes) == 1
            and identifier in graph.nodes
            and len(graph.nodes[identifier]) == 0)

    def test_filled_attributes(self):
        """Adding node with attributes
            - non-existent node should be added
            - filled attributes should be added to node
            - node identifier should be returned
        """
        graph = UndirectedGraph()
        identifier = graph.add_node(age=21, sex=True)
        assert (len(graph.nodes) == 1
            and identifier in graph.nodes
            and len(graph.nodes[identifier]) == 2
            and graph.nodes[identifier].get('age') == 21
            and graph.nodes[identifier].get('sex') is True)

    def test_exception_node_already_exists(self):
        """Adding already existing node
            - existent node should not be replaced by new
            - expected raise NodeAlreadyExistsException
        """
        graph = UndirectedGraph()
        graph.add_node('Theodore')
        with pytest.raises(NodeAlreadyExistsException):
            graph.add_node('Theodore', age=23, sex=True)  # node already exists
        assert (len(graph.nodes) == 1
            and 'Theodore' in graph.nodes
            and graph.nodes['Theodore'].get('age') is None
            and graph.nodes['Theodore'].get('sex') is None)

    def test_replace_existing_node_and_copying_calculated_attributes(self):
        """Replacing already existing node
            - existent node should be replaced by new (if replace=True)
            - calculated attributes should be copied
        """
        graph = UndirectedGraph()
        graph.add_node('Naomi', age=18)
        graph.calc_degree()
        graph.find_neighbors()
        identifier = graph.add_node('Naomi', age=27, replace=True)  # replace existing node
        assert (len(graph.nodes) == 1
            and identifier in graph.nodes
            and len(graph.nodes[identifier]) == 3
            and graph.nodes[identifier].get('age') == 27
            and graph.nodes[identifier].get('degree') == 0
            and graph.nodes[identifier].get('neighbors') == set())

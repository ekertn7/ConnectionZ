"""Tests DirectedGraph and UndirectedGraph method `__eq__`"""

from connectionz import DirectedGraph, UndirectedGraph


class TestsDirectedGraphMethodEq:
    """Tests of DirectedGraph method `__eq__`"""

    def test_negative_different_nodes(self):
        """Using method `__eq__`, negative case since the nodes are different"""
        first_graph = DirectedGraph(
            nodes={'Alex': {'age': 19}, 'Bella': {'age': 18}},  # different node attributes
            edges={('Alex', 'Bella'): {'2024-05-12': {'amount': 1900}}} )
        second_graph = DirectedGraph(
            nodes={'Alex': {'age': 21}, 'Bella': {'age': 18}},  # different node attributes
            edges={('Alex', 'Bella'): {'2024-05-12': {'amount': 1900}}} )
        assert first_graph != second_graph

    def test_negative_different_edges(self):
        """Using method `__eq__`, negative case since the edges are different
        (because edge identifiers were generated automatically)
        """
        first_graph = DirectedGraph(
            nodes=['Alex', 'Bella', 'Clare'],
            edges=[('Alex', 'Bella'), ('Bella', 'Clare')] )  # autogenerated edge identifiers
        second_graph = DirectedGraph(
            nodes=['Alex', 'Bella', 'Clare'],
            edges=[('Alex', 'Bella'), ('Bella', 'Clare')] )  # autogenerated edge identifiers
        assert first_graph != second_graph

    def test_negative_different_types(self):
        """Using method `__eq__`, negative case since the graph types are different"""
        first_graph = DirectedGraph()
        second_graph = UndirectedGraph()
        assert first_graph != second_graph

    def test_positive(self):
        """Using method `__eq__`, positive case"""
        first_graph = DirectedGraph(
            nodes={'Alex': {'age': 19}, 'Bella': {'age': 18}},
            edges={('Alex', 'Bella'): {'2024-05-12': {'amount': 1900}}} )
        second_graph = DirectedGraph(
            nodes={'Alex': {'age': 19}, 'Bella': {'age': 18}},
            edges={('Alex', 'Bella'): {'2024-05-12': {'amount': 1900}}} )
        assert first_graph == second_graph


class TestsUndirectedGraphMethodEq:
    """Tests of UndirectedGraph method `__eq__`"""

    def test_negative_different_nodes(self):
        """Using method `__eq__`, negative case since the nodes are different"""
        first_graph = UndirectedGraph(
            nodes={'Alex': {'age': 19}, 'Bella': {'age': 18}},  # different node attributes
            edges={('Alex', 'Bella'): {'2024-05-12': {'amount': 1900}}} )
        second_graph = UndirectedGraph(
            nodes={'Alex': {'age': 21}, 'Bella': {'age': 18}},  # different node attributes
            edges={('Alex', 'Bella'): {'2024-05-12': {'amount': 1900}}} )
        assert first_graph != second_graph

    def test_negative_different_edges(self):
        """Using method `__eq__`, negative case since the edges are different
        (because edge identifiers were generated automatically)
        """
        first_graph = UndirectedGraph(
            nodes=['Alex', 'Bella', 'Clare'],
            edges=[('Alex', 'Bella'), ('Bella', 'Clare')] )  # autogenerated edge identifiers
        second_graph = UndirectedGraph(
            nodes=['Alex', 'Bella', 'Clare'],
            edges=[('Alex', 'Bella'), ('Bella', 'Clare')] )  # autogenerated edge identifiers
        assert first_graph != second_graph

    def test_negative_different_types(self):
        """Using method `__eq__`, negative case since the graph types are different"""
        first_graph = UndirectedGraph()
        second_graph = DirectedGraph()
        assert first_graph != second_graph

    def test_positive(self):
        """Using method `__eq__`, positive case"""
        first_graph = UndirectedGraph(
            nodes={'Alex': {'age': 19}, 'Bella': {'age': 18}},
            edges={('Alex', 'Bella'): {'2024-05-12': {'amount': 1900}}} )
        second_graph = UndirectedGraph(
            nodes={'Alex': {'age': 19}, 'Bella': {'age': 18}},
            edges={('Alex', 'Bella'): {'2024-05-12': {'amount': 1900}}} )
        assert first_graph == second_graph

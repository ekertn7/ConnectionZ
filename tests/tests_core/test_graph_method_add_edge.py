"""Tests DirectedGraph and UndirectedGraph method `add_edge`

if (wrong type of node identifier):
    - raise WrongTypeOfNodeIdentifierException

if (edge identifier specified) and (wrong type of edge identifier):
    - raise WrongTypeOfEdgeIdentifierException

if (couple exists) and (edge exists) and (replace is False):
    - raise EdgeAlreadyExistsException

if (couple exists) and (edge exists) and (replace is True):
    - replace existing edge in couple

if (couple exists) and (edge not exists):
    - add new edge in couple

if (couple not exists):
    - create new couple
    - add new edge in couple

- generate identifier automatically (if edge identifier not specified)
- add non-existent incident nodes
- recalculate calculated attributes (optional)
- return edge identifier
"""

import pytest
from connectionz import (
    DirectedGraph, UndirectedGraph,
    Identifier, generate_identifier)
from connectionz.exceptions import (
    WrongTypeOfNodeIdentifierException,
    WrongTypeOfEdgeIdentifierException,
    EdgeAlreadyExistsException)


class TestsDirectedGraphMethodAddEdge:
    """Tests of DirectedGraph method `add_edge`"""

    def test_exception_wrong_type_of_node_identifier(self):
        """Adding edge with wrong node identifiers type
            - edge with wrong node identifiers should not be added
            - expected raise WrongTypeOfNodeIdentifierException
        """
        graph = DirectedGraph()
        with pytest.raises(WrongTypeOfNodeIdentifierException):
            graph.add_edge(4217_092672, '4825_235819')  # wrong type of node identifier
        assert len(graph.nodes) == 0 and len(graph.edges) == 0

    def test_exception_wrong_type_of_edge_identifier(self):
        """Adding edge with wrong edge identifier type
            - edge with wrong identifier should not be added
            - expected raise WrongTypeOfEdgeIdentifierException
        """
        graph = DirectedGraph()
        with pytest.raises(WrongTypeOfEdgeIdentifierException):
            graph.add_edge('Alexandra', 'Andrew', 2024_07_21)  # wrong type of edge identifier
        assert len(graph.nodes) == 0 and len(graph.edges) == 0

    def test_exception_edge_already_exists(self):
        """Adding already existing edge
            - existent edge should not be replaced by new
            - expected raise EdgeAlreadyExistsException
        """
        graph = DirectedGraph()
        graph.add_edge('Mateo', 'Henry', '8eb95d2', amount=1500)
        with pytest.raises(EdgeAlreadyExistsException):
            graph.add_edge('Mateo', 'Henry', '8eb95d2', amount=1700)  # edge already exists
        assert (len(graph.nodes) == 2
            and 'Mateo' in graph.nodes
            and 'Henry' in graph.nodes
            and len(graph.edges) == 1
            and ('Mateo', 'Henry') in graph.edges
            and len(graph.edges[('Mateo', 'Henry')]['8eb95d2']) == 1
            and graph.edges[('Mateo', 'Henry')]['8eb95d2'].get('amount') == 1500)

    def test_add_couple_and_edge_and_non_existent_nodes_with_autogenerated_identifier(self):
        """Adding edge without identifier
            - identifier should be generated automatically
            - non-existent edge should be added
            - non-existent incident nodes should be added
            - edge identifier should be returned
        """
        graph = DirectedGraph()
        identifier = graph.add_edge('Nolan', 'Norah')
        assert (isinstance(identifier, Identifier)
            and len(identifier) == len(generate_identifier())
            and len(graph.nodes) == 2
            and 'Nolan' in graph.nodes
            and 'Norah' in graph.nodes
            and len(graph.edges) == 1
            and ('Nolan', 'Norah') in graph.edges)

    def test_add_couple_and_edge_and_non_existent_nodes_with_specified_identifier(self):
        """Adding edge with specified identifier
            - non-existent edge should be added
            - non-existent incident nodes should be added
            - edge identifier should be returned
        """
        graph = DirectedGraph()
        identifier = graph.add_edge('Nolan', 'Norah', '2024-07-16')
        assert (isinstance(identifier, Identifier)
            and identifier == '2024-07-16'
            and len(graph.nodes) == 2
            and 'Nolan' in graph.nodes
            and 'Norah' in graph.nodes
            and len(graph.edges) == 1
            and ('Nolan', 'Norah') in graph.edges)

    def test_replace_existing_edge_in_couple(self):
        """Replacing already existing edge
            - existent edge should be replaced by new (if replace=True)
        """
        graph = DirectedGraph()
        graph.add_edge('Simon', 'Evie', 'fbd074f', amount=1500)
        graph.add_edge('Simon', 'Evie', 'fbd074f', amount=2300, replace=True)
        assert (len(graph.nodes) == 2
            and 'Simon' in graph.nodes
            and 'Evie' in graph.nodes
            and len(graph.edges) == 1
            and ('Simon', 'Evie') in graph.edges
            and len(graph.edges[('Simon', 'Evie')]['fbd074f']) == 1
            and graph.edges[('Simon', 'Evie')]['fbd074f'].get('amount') == 2300)

    def test_add_non_existing_edge_in_couple(self):
        """Adding non-existent edge in existent couple"""
        graph = DirectedGraph()
        graph.add_edge('Lola', 'Omar', '8eb95d2', amount=1500)
        graph.add_edge('Lola', 'Omar', '3a6d3d6', amount=2300)
        assert (len(graph.nodes) == 2
            and 'Lola' in graph.nodes
            and 'Omar' in graph.nodes
            and len(graph.edges) == 1
            and ('Lola', 'Omar') in graph.edges
            and len(graph.edges[('Lola', 'Omar')]) == 2
            and graph.edges[('Lola', 'Omar')]['8eb95d2'].get('amount') == 1500
            and graph.edges[('Lola', 'Omar')]['3a6d3d6'].get('amount') == 2300)

    def test_default_recalculate_calculated_attributes(self):
        """Adding edge with automatically recalculation calculated attributes
        (default behavior)
        """
        graph = DirectedGraph(
            nodes=[
                'Daphne',  # degree = 1, neighbors = {'Talia'}
                'Talia',   # degree = 1, neighbors is empty
                'Evie'],   # degree = 0, neighbors is empty
            edges=[('Daphne', 'Talia')] )
        graph.add_edge('Daphne', 'Evie')
        assert (len(graph.nodes) == 3
            and 'Daphne' in graph.nodes
            and 'Talia' in graph.nodes
            and 'Evie' in graph.nodes
            and len(graph.edges) == 2
            and ('Daphne', 'Talia') in graph.edges
            and ('Daphne', 'Evie') in graph.edges
            and graph.nodes['Daphne']['degree'] == 2
            and graph.nodes['Daphne']['neighbors'] == {'Talia', 'Evie'}
            and graph.nodes['Talia']['degree'] == 1
            and graph.nodes['Talia']['neighbors'] == set()
            and graph.nodes['Evie']['degree'] == 1
            and graph.nodes['Evie']['neighbors'] == set())

    def test_disable_recalculate_calculated_attributes(self):
        """Adding edge with disabled automatically recalculation calculated
        attributes (custom behavior)
        """
        graph = DirectedGraph(
            nodes=[
                'Daphne',  # degree = 1, neighbors = {'Talia'}
                'Talia',   # degree = 1, neighbors is empty
                'Evie'],   # degree = 0, neighbors is empty
            edges=[('Daphne', 'Talia')] )
        graph.add_edge('Daphne', 'Evie', recalculate_calculated_attributes=False)
        assert (len(graph.nodes) == 3
            and 'Daphne' in graph.nodes
            and 'Talia' in graph.nodes
            and 'Evie' in graph.nodes
            and len(graph.edges) == 2
            and ('Daphne', 'Talia') in graph.edges
            and ('Daphne', 'Evie') in graph.edges
            and graph.nodes['Daphne']['degree'] == 1
            and graph.nodes['Daphne']['neighbors'] == {'Talia'}
            and graph.nodes['Talia']['degree'] == 1
            and graph.nodes['Talia']['neighbors'] == set()
            and graph.nodes['Evie']['degree'] == 0
            and graph.nodes['Evie']['neighbors'] == set())


class TestsUndirectedGraphMethodAddEdge:
    """Tests of UndirectedGraph method `add_edge`"""

    def test_exception_wrong_type_of_node_identifier(self):
        """Adding edge with wrong node identifiers type
            - edge with wrong node identifiers should not be added
            - expected raise WrongTypeOfNodeIdentifierException
        """
        graph = UndirectedGraph()
        with pytest.raises(WrongTypeOfNodeIdentifierException):
            graph.add_edge(4217_092672, '4825_235819')  # wrong type of node identifier
        assert len(graph.nodes) == 0 and len(graph.edges) == 0

    def test_exception_wrong_type_of_edge_identifier(self):
        """Adding edge with wrong edge identifier type
            - edge with wrong identifier should not be added
            - expected raise WrongTypeOfEdgeIdentifierException
        """
        graph = UndirectedGraph()
        with pytest.raises(WrongTypeOfEdgeIdentifierException):
            graph.add_edge('Alexandra', 'Andrew', 2024_07_21)  # wrong type of edge identifier
        assert len(graph.nodes) == 0 and len(graph.edges) == 0

    def test_exception_edge_already_exists(self):
        """Adding already existing edge
            - existent edge should not be replaced by new
            - expected raise EdgeAlreadyExistsException
        """
        graph = UndirectedGraph()
        graph.add_edge('Mateo', 'Henry', '8eb95d2', amount=1500)
        with pytest.raises(EdgeAlreadyExistsException):
            graph.add_edge('Mateo', 'Henry', '8eb95d2', amount=1700)  # edge already exists
        assert (len(graph.nodes) == 2
            and 'Mateo' in graph.nodes
            and 'Henry' in graph.nodes
            and len(graph.edges) == 1
            and tuple(sorted(('Mateo', 'Henry'))) in graph.edges
            and len(graph.edges[tuple(sorted(('Mateo', 'Henry')))]['8eb95d2']) == 1
            and graph.edges[tuple(sorted(('Mateo', 'Henry')))]['8eb95d2'].get('amount') == 1500)

    def test_add_couple_and_edge_and_non_existent_nodes_with_autogenerated_identifier(self):
        """Adding edge without identifier
            - identifier should be generated automatically
            - non-existent edge should be added
            - non-existent incident nodes should be added
            - edge identifier should be returned
        """
        graph = UndirectedGraph()
        identifier = graph.add_edge('Nolan', 'Norah')
        assert (isinstance(identifier, Identifier)
            and len(identifier) == len(generate_identifier())
            and len(graph.nodes) == 2
            and 'Nolan' in graph.nodes
            and 'Norah' in graph.nodes
            and len(graph.edges) == 1
            and tuple(sorted(('Nolan', 'Norah'))) in graph.edges)

    def test_add_couple_and_edge_and_non_existent_nodes_with_specified_identifier(self):
        """Adding edge with specified identifier
            - non-existent edge should be added
            - non-existent incident nodes should be added
            - edge identifier should be returned
        """
        graph = UndirectedGraph()
        identifier = graph.add_edge('Nolan', 'Norah', '2024-07-16')
        assert (isinstance(identifier, Identifier)
            and identifier == '2024-07-16'
            and len(graph.nodes) == 2
            and 'Nolan' in graph.nodes
            and 'Norah' in graph.nodes
            and len(graph.edges) == 1
            and tuple(sorted(('Nolan', 'Norah'))) in graph.edges)

    def test_replace_existing_edge_in_couple(self):
        """Replacing already existing edge
            - existent edge should be replaced by new (if replace=True)
        """
        graph = UndirectedGraph()
        graph.add_edge('Simon', 'Evie', 'fbd074f', amount=1500)
        graph.add_edge('Simon', 'Evie', 'fbd074f', amount=2300, replace=True)
        assert (len(graph.nodes) == 2
            and 'Simon' in graph.nodes
            and 'Evie' in graph.nodes
            and len(graph.edges) == 1
            and tuple(sorted(('Simon', 'Evie'))) in graph.edges
            and len(graph.edges[tuple(sorted(('Simon', 'Evie')))]['fbd074f']) == 1
            and graph.edges[tuple(sorted(('Simon', 'Evie')))]['fbd074f'].get('amount') == 2300)

    def test_add_non_existing_edge_in_couple(self):
        """Adding non-existent edge in existent couple"""
        graph = UndirectedGraph()
        graph.add_edge('Lola', 'Omar', '8eb95d2', amount=1500)
        graph.add_edge('Lola', 'Omar', '3a6d3d6', amount=2300)
        assert (len(graph.nodes) == 2
            and 'Lola' in graph.nodes
            and 'Omar' in graph.nodes
            and len(graph.edges) == 1
            and tuple(sorted(('Lola', 'Omar'))) in graph.edges
            and len(graph.edges[tuple(sorted(('Lola', 'Omar')))]) == 2
            and graph.edges[tuple(sorted(('Lola', 'Omar')))]['8eb95d2'].get('amount') == 1500
            and graph.edges[tuple(sorted(('Lola', 'Omar')))]['3a6d3d6'].get('amount') == 2300)

    def test_default_recalculate_calculated_attributes(self):
        """Adding edge with automatically recalculation calculated attributes
        (default behavior)
        """
        graph = UndirectedGraph(
            nodes=[
                'Daphne',  # degree = 1, neighbors = {'Talia'}
                'Talia',   # degree = 1, neighbors = {'Daphne'}
                'Evie'],   # degree = 0, neighbors is empty
            edges=[('Daphne', 'Talia')] )
        graph.add_edge('Daphne', 'Evie')
        assert (len(graph.nodes) == 3
            and 'Daphne' in graph.nodes
            and 'Talia' in graph.nodes
            and 'Evie' in graph.nodes
            and len(graph.edges) == 2
            and tuple(sorted(('Daphne', 'Talia'))) in graph.edges
            and tuple(sorted(('Daphne', 'Evie'))) in graph.edges
            and graph.nodes['Daphne']['degree'] == 2
            and graph.nodes['Daphne']['neighbors'] == {'Talia', 'Evie'}
            and graph.nodes['Talia']['degree'] == 1
            and graph.nodes['Talia']['neighbors'] == {'Daphne'}
            and graph.nodes['Evie']['degree'] == 1
            and graph.nodes['Evie']['neighbors'] == {'Daphne'})

    def test_disable_recalculate_calculated_attributes(self):
        """Adding edge with disabled automatically recalculation calculated
        attributes (custom behavior)
        """
        graph = UndirectedGraph(
            nodes=[
                'Daphne',  # degree = 1, neighbors = {'Talia'}
                'Talia',   # degree = 1, neighbors = {'Daphne'}
                'Evie'],   # degree = 0, neighbors is empty
            edges=[('Daphne', 'Talia')] )
        graph.add_edge('Daphne', 'Evie', recalculate_calculated_attributes=False)
        assert (len(graph.nodes) == 3
            and 'Daphne' in graph.nodes
            and 'Talia' in graph.nodes
            and 'Evie' in graph.nodes
            and len(graph.edges) == 2
            and tuple(sorted(('Daphne', 'Talia'))) in graph.edges
            and tuple(sorted(('Daphne', 'Evie'))) in graph.edges
            and graph.nodes['Daphne']['degree'] == 1
            and graph.nodes['Daphne']['neighbors'] == {'Talia'}
            and graph.nodes['Talia']['degree'] == 1
            and graph.nodes['Talia']['neighbors'] == {'Daphne'}
            and graph.nodes['Evie']['degree'] == 0
            and graph.nodes['Evie']['neighbors'] == set())
